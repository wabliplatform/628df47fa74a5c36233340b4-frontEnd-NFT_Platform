
[{
    "methodType":"POST",
    "methodName":"createnft",
    "returnType":{
      "primitive":false,
      "jsType":"",
      "modelName":"Nft"
    },
    "importStatement":"import TempApi from '../src/index';",
    "apiInstance":"let apiNftApi = new TempApi.NftApi();",
    "importModelParameter":["let nft = new TempApi.Nft();"],
    "modelNames":["nft"],
    "functionNextTemplate":"/**nextFunction*/",
    "apiCallPromisified":"apiNftApi.createnft( nft, (error, data, response) => { if (error) {console.error(error);} else { console.log('API called successfully. Returned data: ' + data); /**nextFunction*/}});"
  },{
    "methodType":"DELETE",
    "methodName":"deletenft",
    "returnType":{

      "primitive":"true",
      "type":"null"
    },
    "importStatement":"import TempApi from '../src/index';",
    "apiInstance":"let apiNftApi = new TempApi.NftApi();",
    "importModelParameter":[],
    "modelNames":[],
    "functionNextTemplate":"/**nextFunction*/",
    "apiCallPromisified":"apiNftApi.deletenft( nftId, (error, data, response) => { if (error) {console.error(error);} else { console.log('API called successfully.');/**nextFunction*/}});"
  },{
    "methodType":"GETALL",
    "methodName":"getAllnft",
    "returnType":{
      "primitive":false,
      "jsType":"Array",
      "modelName":"[Nft]"
    },
    "importStatement":"import TempApi from '../src/index';",
    "apiInstance":"let apiNftApi = new TempApi.NftApi();",
    "importModelParameter":[],
    "modelNames":[],
    "functionNextTemplate":"/**nextFunction*/",
    "apiCallPromisified":"apiNftApi.getAllnft((error, data, response) => { if (error) {console.error(error);} else { console.log('API called successfully. Returned data: ' + data); /**nextFunction*/}});"
  },{
    "methodType":"GET",
    "methodName":"getnft",
    "returnType":{
      "primitive":false,
      "jsType":"",
      "modelName":"Nft"
    },
    "importStatement":"import TempApi from '../src/index';",
    "apiInstance":"let apiNftApi = new TempApi.NftApi();",
    "importModelParameter":[],
    "modelNames":[],
    "functionNextTemplate":"/**nextFunction*/",
    "apiCallPromisified":"apiNftApi.getnft( nftId, (error, data, response) => { if (error) {console.error(error);} else { console.log('API called successfully. Returned data: ' + data); /**nextFunction*/}});"
  },{
    "methodType":"PUT",
    "methodName":"updatenft",
    "returnType":{
      "primitive":false,
      "jsType":"",
      "modelName":"Nft"
    },
    "importStatement":"import TempApi from '../src/index';",
    "apiInstance":"let apiNftApi = new TempApi.NftApi();",
    "importModelParameter":[],
    "modelNames":[],
    "functionNextTemplate":"/**nextFunction*/",
    "apiCallPromisified":"apiNftApi.updatenft( nftId, opts, (error, data, response) => { if (error) {console.error(error);} else { console.log('API called successfully. Returned data: ' + data); /**nextFunction*/}});"
  }
]
