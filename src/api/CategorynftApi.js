/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Categorynft from '../model/Categorynft';

/**
* Categorynft service.
* @module api/CategorynftApi
* @version 1.0.0
*/
export default class CategorynftApi {

    /**
    * Constructs a new CategorynftApi. 
    * @alias module:api/CategorynftApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createcategorynft operation.
     * @callback module:api/CategorynftApi~createcategorynftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Categorynft} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Categorynft} categorynft data to be created
     * @param {module:api/CategorynftApi~createcategorynftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Categorynft}
     */
    createcategorynft(categorynft, callback) {
      let postBody = categorynft;
      // verify the required parameter 'categorynft' is set
      if (categorynft === undefined || categorynft === null) {
        throw new Error("Missing the required parameter 'categorynft' when calling createcategorynft");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Categorynft;
      return this.apiClient.callApi(
        '/categorynft', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletecategorynft operation.
     * @callback module:api/CategorynftApi~deletecategorynftCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} categorynftId the Id parameter
     * @param {module:api/CategorynftApi~deletecategorynftCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletecategorynft(categorynftId, callback) {
      let postBody = null;
      // verify the required parameter 'categorynftId' is set
      if (categorynftId === undefined || categorynftId === null) {
        throw new Error("Missing the required parameter 'categorynftId' when calling deletecategorynft");
      }

      let pathParams = {
        'categorynftId': categorynftId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/categorynft/{categorynftId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllcategorynft operation.
     * @callback module:api/CategorynftApi~getAllcategorynftCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Categorynft>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/CategorynftApi~getAllcategorynftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Categorynft>}
     */
    getAllcategorynft(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Categorynft];
      return this.apiClient.callApi(
        '/categorynft/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getcategorynft operation.
     * @callback module:api/CategorynftApi~getcategorynftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Categorynft} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} categorynftId the Id parameter
     * @param {module:api/CategorynftApi~getcategorynftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Categorynft}
     */
    getcategorynft(categorynftId, callback) {
      let postBody = null;
      // verify the required parameter 'categorynftId' is set
      if (categorynftId === undefined || categorynftId === null) {
        throw new Error("Missing the required parameter 'categorynftId' when calling getcategorynft");
      }

      let pathParams = {
        'categorynftId': categorynftId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Categorynft;
      return this.apiClient.callApi(
        '/categorynft/{categorynftId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatecategorynft operation.
     * @callback module:api/CategorynftApi~updatecategorynftCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Categorynft} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} categorynftId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Categorynft} opts.categorynft data to be updated
     * @param {module:api/CategorynftApi~updatecategorynftCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Categorynft}
     */
    updatecategorynft(categorynftId, opts, callback) {
      opts = opts || {};
      let postBody = opts['categorynft'];
      // verify the required parameter 'categorynftId' is set
      if (categorynftId === undefined || categorynftId === null) {
        throw new Error("Missing the required parameter 'categorynftId' when calling updatecategorynft");
      }

      let pathParams = {
        'categorynftId': categorynftId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Categorynft;
      return this.apiClient.callApi(
        '/categorynft/{categorynftId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
