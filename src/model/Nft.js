/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Categorynft from './Categorynft';
import NftNFTimage from './NftNFTimage';

/**
 * The Nft model module.
 * @module model/Nft
 * @version 1.0.0
 */
class Nft {
    /**
     * Constructs a new <code>Nft</code>.
     * @alias module:model/Nft
     * @param nFTtitle {String} 
     * @param nFTimage {module:model/NftNFTimage} 
     * @param nFTdescription {String} 
     * @param nFTCategory {module:model/Categorynft} 
     * @param nFTprice {Number} 
     * @param userNFTs {Array.<module:model/Nft>} 
     * @param titleNFT {String} 
     */
    constructor(nFTtitle, nFTimage, nFTdescription, nFTCategory, nFTprice, userNFTs, titleNFT) { 
        
        Nft.initialize(this, nFTtitle, nFTimage, nFTdescription, nFTCategory, nFTprice, userNFTs, titleNFT);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nFTtitle, nFTimage, nFTdescription, nFTCategory, nFTprice, userNFTs, titleNFT) { 
        obj['NFTtitle'] = nFTtitle;
        obj['NFTimage'] = nFTimage;
        obj['NFTdescription'] = nFTdescription;
        obj['NFTCategory'] = nFTCategory;
        obj['NFTprice'] = nFTprice;
        obj['UserNFTs'] = userNFTs;
        obj['titleNFT'] = titleNFT;
    }

    /**
     * Constructs a <code>Nft</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Nft} obj Optional instance to populate.
     * @return {module:model/Nft} The populated <code>Nft</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Nft();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('NFTtitle')) {
                obj['NFTtitle'] = ApiClient.convertToType(data['NFTtitle'], 'String');
            }
            if (data.hasOwnProperty('NFTimage')) {
                obj['NFTimage'] = NftNFTimage.constructFromObject(data['NFTimage']);
            }
            if (data.hasOwnProperty('NFTdescription')) {
                obj['NFTdescription'] = ApiClient.convertToType(data['NFTdescription'], 'String');
            }
            if (data.hasOwnProperty('NFTCategory')) {
                obj['NFTCategory'] = ApiClient.convertToType(data['NFTCategory'], Categorynft);
            }
            if (data.hasOwnProperty('NFTprice')) {
                obj['NFTprice'] = ApiClient.convertToType(data['NFTprice'], 'Number');
            }
            if (data.hasOwnProperty('UserNFTs')) {
                obj['UserNFTs'] = ApiClient.convertToType(data['UserNFTs'], [Nft]);
            }
            if (data.hasOwnProperty('titleNFT')) {
                obj['titleNFT'] = ApiClient.convertToType(data['titleNFT'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} _id
 */
Nft.prototype['_id'] = undefined;

/**
 * @member {String} NFTtitle
 */
Nft.prototype['NFTtitle'] = undefined;

/**
 * @member {module:model/NftNFTimage} NFTimage
 */
Nft.prototype['NFTimage'] = undefined;

/**
 * @member {String} NFTdescription
 */
Nft.prototype['NFTdescription'] = undefined;

/**
 * @member {module:model/Categorynft} NFTCategory
 */
Nft.prototype['NFTCategory'] = undefined;

/**
 * @member {Number} NFTprice
 */
Nft.prototype['NFTprice'] = undefined;

/**
 * @member {Array.<module:model/Nft>} UserNFTs
 */
Nft.prototype['UserNFTs'] = undefined;

/**
 * @member {String} titleNFT
 */
Nft.prototype['titleNFT'] = undefined;






export default Nft;

